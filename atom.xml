<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晴天·Sunny</title>
  
  <subtitle>Try Hard And Do Your Best</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhouyang1994.cn/"/>
  <updated>2017-11-08T07:43:19.579Z</updated>
  <id>http://zhouyang1994.cn/</id>
  
  <author>
    <name>zhouyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dream It Possible</title>
    <link href="http://zhouyang1994.cn/2017/10/27/Dream%20It%20Possible/"/>
    <id>http://zhouyang1994.cn/2017/10/27/Dream It Possible/</id>
    <published>2017-10-27T06:29:14.000Z</published>
    <updated>2017-11-08T07:43:19.579Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oyb6f71eo.bkt.clouddn.com/dream_bg.jpg" alt="bg"></p><a id="more"></a><center><br><font size="6" color="#004B89"><br>Dream It Possible<br></font><br></center><hr><center><br><font size="4" color="#4CBEF8"><br>I will run, I will climb, I will soar<br><br>奔跑着，攀爬着，飞翔着<br><br>I’m undefeated<br><br>没有什么能打败我<br><br>Jumping out of my skin, pull the chord<br><br>脱离身体的桎梏，拨动琴弦<br><br>Yeah I believe it<br><br>是的，我相信<br><br>The past, is everything we were don’t make us who we are<br><br>每个人都有属于自己的过往，但这并不影响我们成为什么样的人<br><br>So I’ll dream, until I make it real, and all I see is stars<br><br>我勇敢梦，直到梦想实现，看到满天繁星<br><br>Its not until you fall that you fly<br><br>并非挫败后才想起要努力<br><br>When your dreams come alive you’re unstoppable<br><br>当你梦想成真，你是不可阻挡的<br><br>Take a shot, chase the sun, find the beautiful<br><br>为何不试一下，追逐太阳，寻找美好<br><br>We will glow in the dark turning dust to gold<br><br>我们会在黑暗中闪耀，点石成金<br><br>And we’ll dream it possible possible<br><br>有梦就有希望<br><br>I will chase, I will reach, I will fly<br><br>追逐着，冲刺着，飞翔着<br><br>Until I’m breaking, until I’m breaking<br><br>直到筋疲力尽<br><br>Out of my cage, like a bird in the night<br><br>脱离牢笼，像夜空中自由的鸟儿<br><br>I know I’m changing, I know I’m changing<br><br>我知道我在改变<br><br>In, into something big, better than before<br><br>变得更为强大，从未如此过<br><br>And if it takes, takes a thousand lives<br><br>无论要付出多少代价<br><br>Then It’s worth fighting for<br><br>都值得我为此奋斗<br><br>Its not until you fall that you fly<br><br>并非挫败后才想起要努力<br><br>When your dreams come alive you’re unstoppable<br><br>当你梦想成真，你是不可阻挡的<br><br>Take a shot, chase the sun, find the beautiful<br><br>为何不试一下，追逐太阳，寻找美好<br><br>We will glow in the dark turning dust to gold<br><br>我们会在黑暗中闪耀，点石成金<br><br>And we’ll dream it possible possible possible<br><br>有梦就有希望<br><br>From the bottom to the top<br><br>从低谷到巅峰<br><br>We’re sparking wild fire’s<br><br>我们如烈火般闪耀<br><br>Never quit and never stop<br><br>从不退缩，从不放弃<br><br>The rest of our lives<br><br>余生无憾<br><br>From the bottom to the top<br><br>从低谷到巅峰<br><br>We’re sparking wild fire’s<br><br>我们如烈火般闪耀<br><br>Never quit and never stop<br><br>从不退缩，从不放弃<br><br>Its not until you fall that you fly<br><br>并非挫败后才想起要努力<br><br>When your dreams come alive you’re unstoppable<br><br>当你梦想成真，你是不可阻挡的<br><br>Take a shot, chase the sun, find the beautiful<br><br>为何不试一下，追逐太阳，寻找美好<br><br>We will glow in the dark turning dust to gold<br><br>我们会在黑暗中闪耀，点石成金<br><br>And we’ll dream it possible possible possible<br><br>有梦就有希望<br><br>And we’ll dream it possible<br><br>梦想终会实现<br></font><br></center><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=38592976&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oyb6f71eo.bkt.clouddn.com/dream_bg.jpg&quot; alt=&quot;bg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="音乐" scheme="http://zhouyang1994.cn/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="music" scheme="http://zhouyang1994.cn/tags/music/"/>
    
  </entry>
  
  <entry>
    <title>CSS盒模型详解</title>
    <link href="http://zhouyang1994.cn/2017/10/25/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zhouyang1994.cn/2017/10/25/CSS盒模型详解/</id>
    <published>2017-10-25T02:59:15.000Z</published>
    <updated>2017-11-08T07:53:21.220Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oyb6f71eo.bkt.clouddn.com/css_bg.jpg" alt="doudou"></p><a id="more"></a><h2 id="CSS盒模型详解"><a href="#CSS盒模型详解" class="headerlink" title="CSS盒模型详解"></a>CSS盒模型详解</h2><p>CSS的盒模型是CSS的基础，同时也是难点，这个问题经常在面试中会被问到，属于经典问题了。</p><p>可以认为每个html标签都是一个方块，然后这个方块又包着几个小方块，如同盒子一层层的包裹着，这就是所谓的盒模型。</p><p><strong>盒模型分类：分为IE盒模型、W3C标准盒模型</strong></p><p><strong>IE盒模型和W3C标准盒模型的 <u><strong>区别</strong></u> 是什么？</strong></p><p><strong>1.W3C 标准盒模型：</strong></p><p><em>属性width,height只包含内容content，不包含border和padding。</em></p><p><strong>2.IE 盒模型：</strong></p><p><em>属性width,height包含border和padding，指的是content+padding+border。</em></p><p><strong>在<i>ie8+</i>浏览器中使用哪个盒模型可以由box-sizing(CSS新增的属性)控制，默认值为content-box，即标准盒模型；如果将box-sizing设为border-box则用的是IE盒模型。如果在<i>ie6,7,8</i>中DOCTYPE缺失会触发IE模式。在当前W3C标准中盒模型是可以通过box-sizing自由的进行切换的。</strong></p><table><thead><tr><th style="text-align:left">盒模型</th><th style="text-align:left">width</th><th style="text-align:left">height</th></tr></thead><tbody><tr><td style="text-align:left">content-box（标准盒模型）</td><td style="text-align:left">内容的宽度</td><td style="text-align:left">内容的高度</td></tr><tr><td style="text-align:left">border-box（IE盒模型）</td><td style="text-align:left">border + padding + 内容的宽度</td><td style="text-align:left">border + padding + 内容的高度</td></tr></tbody></table><p>谷歌浏览器，按下F12，然后把右边栏的滚动条拉到最下面你就会看到一个东西：</p><p><img src="http://oyb6f71eo.bkt.clouddn.com/box-Size" alt="boxSize"></p><p><strong>通过代码来对其进行理解，更直观，如下</strong></p><p><strong><em>eg1</em></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">       <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">       <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">       <span class="attribute">background-color</span>:pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://oyb6f71eo.bkt.clouddn.com/boxx.png" alt="box"></p><p>此时，盒子大小就是content的大小。</p><hr><p><strong><em>eg2</em></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">       <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">       <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">       <span class="attribute">background-color</span>:pink;</div><div class="line">       <span class="attribute">padding</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>效果图如下：</strong></p><p><img src="http://oyb6f71eo.bkt.clouddn.com/box.png" alt="box"></p><p><img src="http://oyb6f71eo.bkt.clouddn.com/box-1.png" alt="box-1"></p><p>此时，盒子的长宽变成了240x240，显然，padding是能够改变盒子的大小的，这时盒子大小就等于content+padding。</p><hr><p><strong><em>eg3</em></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">       <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">       <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">       <span class="attribute">background-color</span>:pink;</div><div class="line">       <span class="attribute">padding</span>:<span class="number">20px</span>;</div><div class="line">       <span class="attribute">border</span>:<span class="number">10px</span> solid black;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>效果图如下：</strong></p><p><img src="http://oyb6f71eo.bkt.clouddn.com/box2.png" alt="box2"></p><p><img src="http://oyb6f71eo.bkt.clouddn.com/box2-2.png" alt="box2-2"></p><p>此时，盒子的长宽变成了260x260，所以这时盒子大小就等于content+padding+border。</p><hr><p><strong><em>eg4</em></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">       <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">       <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">       <span class="attribute">background-color</span>:pink;</div><div class="line">       <span class="attribute">padding</span>:<span class="number">20px</span>;</div><div class="line">       <span class="attribute">border</span>:<span class="number">10px</span> solid black;</div><div class="line">       <span class="attribute">margin-bottom</span>:<span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box1</span>&#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">       <span class="attribute">background</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>效果图如下：</strong></p><p><img src="http://oyb6f71eo.bkt.clouddn.com/box3.png" alt="box3"></p><p>此时，盒子的长宽仍为260x260，即盒子的大小并未发生变化。</p><p><img src="http://oyb6f71eo.bkt.clouddn.com/box3-3.png" alt="box3-3"></p><p>可以看到，盒子的底部产生了10px的空白。</p><p><strong>所以说，盒子的大小为content+padding+border即内容的(width)+内边距的再加上边框，而不加上margin。很多时候，我们会错误地把margin算入，若那样的话，上面这种情形盒子的大小应该是260x270，但实际情况并不是这样的。</strong></p><p><strong>css的盒模型由content(内容)、padding(内边距)、border(边框)、margin(外边距)组成。但盒子的大小由content+padding+border这几部分决定，把margin算进去的那是盒子占据的位置，而不是盒子的大小！</strong></p><font size="3" face="黑体">我们可以试着给上面的粉色方块设置box-sizing属性为border-box发现，会发现：无论我们怎么改border和padding盒子大小始终是定义的width和height。</font><p><strong>我们在编写页面代码时应尽量使用标准的W3C模型(需在页面中声明DOCTYPE类型)，这样可以避免多个浏览器对同一页面的不兼容。</strong></p><p><strong>因为若不声明DOCTYPE类型，IE浏览器会将盒子模型解释为IE盒子模型，FireFox等会将其解释为W3C盒子模型；若在页面中声明了DOCTYPE类型，所有的浏览器都会把盒模型解释为W3C盒模型。</strong></p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=432506345&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oyb6f71eo.bkt.clouddn.com/css_bg.jpg&quot; alt=&quot;doudou&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://zhouyang1994.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CSS" scheme="http://zhouyang1994.cn/tags/CSS/"/>
    
      <category term="盒模型" scheme="http://zhouyang1994.cn/tags/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS排序算法</title>
    <link href="http://zhouyang1994.cn/2017/10/24/JS%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://zhouyang1994.cn/2017/10/24/JS排序算法/</id>
    <published>2017-10-24T03:06:36.000Z</published>
    <updated>2017-11-08T07:52:36.730Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oyb6f71eo.bkt.clouddn.com/js_sort_bg.jpg" alt="sort"></p><blockquote><p> 我们平时对计算机中存储的数据执行的两种最常见的操作就是排序和查找，对于计算机的排序和查找的研究，自计算机诞生以来就没有停止过。如今又是大数据，云计算的时代，对数据的排序和查找的速度、效率要求更高，因此要对排序和查找的算法进行专门的数据结构设计，以便让我们对数据的操作更加简洁高效。</p></blockquote><a id="more"></a><h2 id="关于排序算法的说明"><a href="#关于排序算法的说明" class="headerlink" title="关于排序算法的说明"></a>关于排序算法的说明</h2><p>在介绍各个算法之前，我们有必要了解一下评估算法优劣的一些术语：</p><p><strong>稳定：</strong>如果a原本在b前面，当a=b时，排序之后a仍然在b的前面</p><p><strong>不稳定：</strong>如果a原本在b的前面，当a=b时，排序之后a可能会出现在b的后面</p><p><strong>内排序：</strong>所有排序操作都在内存中完成</p><p><strong>外排序：</strong>由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行</p><p><strong>时间复杂度：</strong>一个算法执行所耗费的时间</p><p><strong>空间复杂度：</strong>运行完一个程序所需内存的大小</p><p><img src="http://oyb6f71eo.bkt.clouddn.com/sort.png" alt="sort"></p><h2 id="基本排序算法"><a href="#基本排序算法" class="headerlink" title="基本排序算法"></a>基本排序算法</h2><p>基本排序算法的核心思想就是对一组数据按照一定的顺序重新排序，其中重排时一般都会用到一组嵌套的 for 循环，外循环会遍历数组的每一项元素，内循环则用于进行元素直接的比较。</p><h3 id="冒泡排序（BuddleSort）"><a href="#冒泡排序（BuddleSort）" class="headerlink" title="冒泡排序（BuddleSort）"></a>冒泡排序（BuddleSort）</h3><p>冒泡排序是比较经典的算法之一，也是排序最慢的算法之一，因为它的实现是非常的容易的。</p><p>冒泡排序的算法思想如下（升序排序）：</p><p>1.比较相邻的元素。如果第一个比第二个大，就交换它们两个；</p><p>2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样最终最大数被交换到最后的位置；</p><p>3.除了最后一个元素以外，针对所有的元素重复以上的步骤；</p><p>4.重复步骤1~3，直到排序完成；</p><p>下面我借用网上一张动图，来展示冒泡排序的过程：</p><p><img src="http://oyb6f71eo.bkt.clouddn.com/20160916160748389" alt="sort"></p><p>具体的JS实现如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//冒泡排序</span></div><div class="line">function bubbleSort ( <span class="keyword">data</span> ) &#123;</div><div class="line"><span class="keyword">var</span> temp = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="keyword">data</span>.length ; i &gt; <span class="number">0</span> ; i -- )&#123;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; i - <span class="number">1</span> ; j++)&#123;</div><div class="line">       <span class="keyword">if</span>( <span class="keyword">data</span>[j] &gt; <span class="keyword">data</span>[j + <span class="number">1</span>] )&#123;</div><div class="line">           temp = <span class="keyword">data</span>[j];</div><div class="line">           <span class="keyword">data</span>[j] = <span class="keyword">data</span> [j+<span class="number">1</span>];</div><div class="line">           <span class="keyword">data</span>[j+<span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">data</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="选择排序（SelectionSort）"><a href="#选择排序（SelectionSort）" class="headerlink" title="选择排序（SelectionSort）"></a>选择排序（SelectionSort）</h3><p>选择排序是一种比较简单直观的排序算法。它的算法思想是，从数组的开头开始遍历，将第一个元素和其他元素分别进行比较，记录最小的元素，等循环结束之后，将最小的元素放到数组的第一个位置上，然后从数组的第二个位置开始继续执行上述步骤。当进行到数组倒数第二个位置的时候，所有的数据就完成了排序。</p><p>选择排序同样会用到嵌套循环，外循环从数组第一个位置移到倒数第二个位置；内循环从第二个位置移动到数组最后一个位置，查找比当前外循环所指向的元素还要小的元素，每次内循环结束后，都会将最小的值放到合适的位置上。</p><p>同样，我借用网上一张动图，来展示选择排序的过程 ：</p><p><img src="http://oyb6f71eo.bkt.clouddn.com/selectionSort" alt="selectionSort"></p><p>具体的JS实现如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//选择排序</div><div class="line"><span class="function"><span class="keyword">function</span></span> selectionSort( <span class="keyword">data</span> ) &#123;</div><div class="line">    for( var i = <span class="number">0</span>; i&lt; <span class="keyword">data</span>.length ; i++)&#123;</div><div class="line">        var <span class="built_in">min</span> = <span class="keyword">data</span>[i];</div><div class="line">        var temp;</div><div class="line">        var <span class="built_in">index</span> = i;</div><div class="line">        for( var j = i + <span class="number">1</span>; j&lt; <span class="keyword">data</span>.length; j++)&#123;</div><div class="line">            <span class="keyword">if</span>( <span class="keyword">data</span>[j] &lt; <span class="built_in">min</span> )&#123;</div><div class="line">                <span class="built_in">min</span> = <span class="keyword">data</span>[j];</div><div class="line">                <span class="built_in">index</span> = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        temp = <span class="keyword">data</span>[i];</div><div class="line">        <span class="keyword">data</span>[i] = <span class="built_in">min</span>;</div><div class="line">        <span class="keyword">data</span>[<span class="built_in">index</span>]= temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">data</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="插入排序（insertionSort）"><a href="#插入排序（insertionSort）" class="headerlink" title="插入排序（insertionSort）"></a>插入排序（insertionSort）</h3><p>插入排序有点类似人类按字母顺序对数据进行排序，就如同你打扑克牌一样，将摸来的扑克按大小放到合适的位置一样。它的原理就是通过嵌套循环，外循环将数组元素挨个移动，而内循环则对外循环中选中的元素及它后面的元素进行比较；如果外循环中选中的元素比内循环中选中的元素小，那么数组元素会向右移动，为内循环中的这个元素腾出位置。</p><p>实现步骤如下：</p><ol><li>从第一个元素开始，该元素默认已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置</li><li>重复步骤2~5，直到排序完成</li></ol><p>它的实现效果图如下：</p><p><img src="http://oyb6f71eo.bkt.clouddn.com/insertionSort" alt="insertSort"></p><p>具体的JS实现如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//插入排序</span></div><div class="line">function insertionSort( <span class="keyword">data</span> ) &#123;</div><div class="line">    <span class="keyword">var</span> len = <span class="keyword">data</span>.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">var</span> key = <span class="keyword">data</span>[i];</div><div class="line">        <span class="keyword">var</span> j = i - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> ( j &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">data</span>[j] &gt; key) &#123;</div><div class="line">            <span class="keyword">data</span>[j + <span class="number">1</span>] = <span class="keyword">data</span>[j];</div><div class="line">         j--;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">data</span>[j + <span class="number">1</span>] = key;</div><div class="line">     &#125;</div><div class="line"> <span class="keyword">return</span> <span class="keyword">data</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中冒泡排序是最慢的，插入排序是最快的，我们可以在运行的过程中通过 console.time(‘sortName’) 和 console.timeEnd(‘sortName’) 两个输出来看他们的效率如何。</p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28568244&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oyb6f71eo.bkt.clouddn.com/js_sort_bg.jpg&quot; alt=&quot;sort&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 我们平时对计算机中存储的数据执行的两种最常见的操作就是排序和查找，对于计算机的排序和查找的研究，自计算机诞生以来就没有停止过。如今又是大数据，云计算的时代，对数据的排序和查找的速度、效率要求更高，因此要对排序和查找的算法进行专门的数据结构设计，以便让我们对数据的操作更加简洁高效。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://zhouyang1994.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JS" scheme="http://zhouyang1994.cn/tags/JS/"/>
    
      <category term="学习" scheme="http://zhouyang1994.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://zhouyang1994.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法学习</title>
    <link href="http://zhouyang1994.cn/2017/10/23/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhouyang1994.cn/2017/10/23/Markdown语法学习/</id>
    <published>2017-10-23T09:11:28.000Z</published>
    <updated>2017-11-08T07:01:19.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oyb6f71eo.bkt.clouddn.com/markdown.png" alt="Markdown"></p><blockquote><p><strong>Markdown</strong> 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p></blockquote><a id="more"></a><h2 id="Markdown-语法的简要规则"><a href="#Markdown-语法的简要规则" class="headerlink" title="Markdown 语法的简要规则"></a>Markdown 语法的简要规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">语法：# 一级标题</div><div class="line">     ## 二级标题</div><div class="line">         。</div><div class="line">         。</div><div class="line">         。</div><div class="line">      ###### 六级标题</div></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的空格。</p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>unOrder list 1</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">` 语法： - unOrder list <span class="number">1</span> `</div></pre></td></tr></table></figure><ul><li>unOrder list 2</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">` 语法： - unOrder list <span class="number">2</span> `</div></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>order list 1</li><li>order list 2</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">` 语法： <span class="number">1</span>. <span class="keyword">order</span> <span class="title">list</span> <span class="number">1</span> `</div></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。</p><blockquote><p>例如这样</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语法：&gt; 例如这样</div></pre></td></tr></table></figure><p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可</p><h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>插入链接与插入图片的语法很像，区别在一个 !号</p><h4 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h4><p><a href="http://baidu.com" target="_blank" rel="external">Baidu</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语法：[<span class="string">Baidu</span>](<span class="link">http://baidu.com</span>)</div></pre></td></tr></table></figure><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p><img src="http://mouapp.com/Mou_128.png" alt="Mon icon"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语法：![<span class="string">Mon icon</span>](<span class="link">http://mouapp.com/Mou_128.png</span>)</div></pre></td></tr></table></figure><h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</p><p><strong>粗体</strong></p><p><em>斜体</em></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法：*<span class="strong">*粗体*</span><span class="strong">*</span></div><div class="line"><span class="strong">语法：*</span>斜体<span class="strong">*</span></div></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是我觉得 Markdown 比较累人的地方，例子如下：</p><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="params">| Tables        |</span> Are           <span class="params">| Cool  |</span></div><div class="line"></div><div class="line"><span class="params">| ------------- |</span><span class="symbol">:-------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></div><div class="line"></div><div class="line"><span class="params">| col 3 is      |</span> right-aligned <span class="params">| $1600 |</span></div><div class="line"></div><div class="line"><span class="params">| col 2 is      |</span> centered      <span class="params">|   $12 |</span></div><div class="line"></div><div class="line"><span class="params">| zebra stripes |</span> are neat      <span class="params">|    $1 |</span></div></pre></td></tr></table></figure><h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p><code>if(true) { do  }</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语法：`<span class="javascript"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;  <span class="keyword">do</span>  &#125;</span>`</div></pre></td></tr></table></figure><p>使用tab可缩进</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法只需要另起一行，连续输入三个星号 <em>*</em> 即可。</p><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语法：<span class="emphasis">***</span></div></pre></td></tr></table></figure><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&id=791255735&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oyb6f71eo.bkt.clouddn.com/markdown.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://zhouyang1994.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://zhouyang1994.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Markdown" scheme="http://zhouyang1994.cn/tags/Markdown/"/>
    
  </entry>
  
</feed>
